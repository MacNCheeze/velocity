{
    "project": {
        "name": "Velocity",
        "description": "Test runner for Meteor apps",
        "version": "0.2.13"
    },
    "files": {
        "lib/meteor/files.js": {
            "name": "lib/meteor/files.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/FileCopier.js": {
            "name": "lib/FileCopier.js",
            "modules": {},
            "classes": {
                "FileCopier": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "core.js": {
            "name": "core.js",
            "modules": {
                "Velocity": 1
            },
            "classes": {
                "Velocity": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "default-fixture.js": {
            "name": "default-fixture.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Velocity": {
            "name": "Velocity",
            "submodules": {},
            "classes": {
                "FileCopier": 1,
                "Velocity": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "core.js",
            "line": 11
        }
    },
    "classes": {
        "FileCopier": {
            "name": "FileCopier",
            "shortname": "FileCopier",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Velocity",
            "file": "lib/FileCopier.js",
            "line": 9,
            "description": "Worker that copies test files to the mirror reactively.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "targetFramework",
                            "description": "The name of the target framework\n                                        for which the tests should be copied\n                                        to the mirror.",
                            "type": "String"
                        },
                        {
                            "name": "onFileAdded",
                            "description": "Callback that is called after a\n                                        file was added.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFileChanged",
                            "description": "Callback that is called after a\n                                          file has changed.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFileRemoved",
                            "description": "Callback that is called after a\n                                          file was removed.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "shouldCopy",
                            "description": "Control whether a file is copied.\n                                       Passed the file object from the\n                                       VelocityTestFiles collection which\n                                       has a `absolutePath` field.\n                                       Default: true",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "convertTestPathToMirrorPath",
                            "description": "A function that converts the\n                                                        test file path to the mirror path.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n    var fileCopier = new Velocity.FileCopier({\n      targetFramework: TEST_FRAMEWORK_NAME\n    });\n    fileCopier.start();"
            ]
        },
        "Velocity": {
            "name": "Velocity",
            "shortname": "Velocity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Velocity",
            "namespace": "",
            "file": "core.js",
            "line": 11
        }
    },
    "classitems": [
        {
            "file": "lib/meteor/files.js",
            "line": 1,
            "description": "Copied from Meteor tools/files.js.\n\nIncludes:\n- Helper to find the app root path",
            "class": "FileCopier"
        },
        {
            "file": "lib/FileCopier.js",
            "line": 58,
            "description": "Starts copying files to the mirror.",
            "itemtype": "method",
            "name": "start",
            "memberof": "Velocity.FileCopier.prototype",
            "class": "FileCopier"
        },
        {
            "file": "lib/FileCopier.js",
            "line": 83,
            "description": "Stops copying files to the mirror.",
            "memberof": "Velocity.FileCopier.prototype",
            "class": "FileCopier"
        },
        {
            "file": "core.js",
            "line": 99,
            "description": "Registers a testing framework plugin.",
            "itemtype": "method",
            "name": "registerTestingFramework",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the testing framework.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for the testing framework.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "disableAutoReset",
                            "description": "Velocity's reset cycle will skip reports and logs for this framework\n                                           It will be the responsibility of the framework to clean up its ****!",
                            "type": "String"
                        },
                        {
                            "name": "regex",
                            "description": "The regular expression for test files that should be assigned\n                                           to the testing framework.\n                                           The path relative to the tests\n                                           folder is matched against it.\n                                           The default is \"name/.+\\.js$\"\n                                           (name is the testing framework name).",
                            "type": "String"
                        },
                        {
                            "name": "sampleTestGenerator",
                            "description": "sampleTestGenerator\n   returns an array of fileObjects with the following fields:",
                            "type": "Function",
                            "props": [
                                {
                                    "name": "path",
                                    "description": "relative path to place test file (from PROJECT/tests)",
                                    "type": "String"
                                },
                                {
                                    "name": "contents",
                                    "description": "contents of the test file the path that's returned",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                }
            ],
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 130,
            "description": "Meteor method: velocity/reset\nRe-init file watcher and clear all test results.",
            "itemtype": "method",
            "name": "velocity/reset",
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 140,
            "description": "Meteor method: velocity/reports/reset\nClear all test results.",
            "itemtype": "method",
            "name": "velocity/reports/reset",
            "params": [
                {
                    "name": "options",
                    "description": "Optional, specify specific framework to clear\n                and/or define a list of tests to keep.\n                ex.\n                {\n                  framework: 'jasmine-unit',\n                  notIn: ['tests/auth-jasmine-unit.js']\n                }",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 171,
            "description": "Meteor method: velocity/logs/reset\nClear all log entried.",
            "itemtype": "method",
            "name": "velocity/logs/reset",
            "params": [
                {
                    "name": "options",
                    "description": "Optional, specify specific framework to clear",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 191,
            "description": "Meteor method: velocity/logs/submit\nLog a method to the central Velocity log store.",
            "itemtype": "method",
            "name": "velocity/logs/submit",
            "params": [
                {
                    "name": "options",
                    "description": "Required parameters:\n                  type - String\n                  message - String\n                  framework - String  ex. 'jasmine-unit'\n\n                Optional parameters:\n                  timestamp - Date",
                    "type": "Object"
                }
            ],
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 220,
            "description": "Meteor method: velocity/reports/submit \n\nRecord the results of a test run; a simple collector of test data.\n\nThe `data` object is stored in its entirety; any field may be passed in.\nThe optional fields documented here are suggestions based on what the\nstandard html-reporter supports.  Whether or not a field is actually\nused is up to the specific test reporter that the user has installed.",
            "itemtype": "method",
            "name": "velocity/reports/submit",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "framework",
                            "description": "Name of a testing framework.\n                               For example, 'jasmine' or 'mocha'.",
                            "type": "String"
                        },
                        {
                            "name": "result",
                            "description": "The results of the test.  Standard values \n                            are 'passed' and 'failed'.  Different test\n                            reporters can support other values.  For\n                            example, the aggregate tests collection uses\n                            'pending' to indicate that results are still\n                            coming in.",
                            "type": "String"
                        },
                        {
                            "name": "id",
                            "description": "Used to update a specific test result.  If not\n                          provided, frameworks can use the 'resetReports'\n                          Meteor method to clear all tests.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "ancestors",
                            "description": "The hierarchy of suites and blocks above\n                                this test. For example,\n                             ['Template', 'leaderboard', 'selected_name']",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "timestamp",
                            "description": "The time that the test started for this\n                               result.",
                            "type": "Date",
                            "optional": true
                        },
                        {
                            "name": "duration",
                            "description": "The test duration milliseconds.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "browser",
                            "description": "Which browser did the test run in?",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "failureType",
                            "description": "For example, 'expect' or 'assert'",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "failureMessage",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "failureStackTrace",
                            "description": "The stack trace associated with\n                                         the failure",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 279,
            "description": "Meteor method: velocity/reports/completed\nFrameworks must call this method to inform Velocity they have completed\ntheir current test runs. Velocity uses this flag when running in CI mode.",
            "itemtype": "method",
            "name": "velocity/reports/completed",
            "params": [
                {
                    "name": "data",
                    "description": "Required fields:\n                  framework - String  ex. 'jasmine-unit'",
                    "type": "Object"
                }
            ],
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 297,
            "description": "Meteor method: velocity/copySampleTests\nCopy sample tests from frameworks `sample-tests` directories\nto user's `app/tests` directory.",
            "itemtype": "method",
            "name": "velocity/copySampleTests",
            "params": [
                {
                    "name": "options!~YUIDOC_LINE~!",
                    "description": "ex. {framework: 'jasmine-unit'}",
                    "type": "Object"
                }
            ],
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 352,
            "description": "Meteor method: velocity/mirrors/request\nStarts a new mirror if it has not already been started, and reuses an existing one if it is already started.\nThis method will return a requestId. Frameworks need to observe the VelocityMirrors collection for a document for\n{requestId: requestId} to know when the mirror is ready.",
            "itemtype": "method",
            "name": "velocity/mirrors/request",
            "params": [
                {
                    "name": "options",
                    "description": "Options for the mirror.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "framework",
                            "description": "The name of the calling framework",
                            "type": "String"
                        },
                        {
                            "name": "fixtureFiles",
                            "description": "Array of files with absolute paths",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "port",
                            "description": "String use a specific port",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "requestId",
                            "description": "Id for the mirror that is used to query the mirror info",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "rootUrl",
                            "description": "Overrides the auto-generated <protocol>://<host>:<port>. This is useful for frameworks that need to customize the\n                                         request parameters that velocity-ci uses",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "requestId    this method will update the VelocityMirrors collection with a requestId once the mirror is ready for use"
            },
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 415,
            "description": "Meteor method: velocity/isMirror\nExposes the IS_MIRROR flag to clients",
            "itemtype": "method",
            "name": "velocity/isMirror",
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 432,
            "description": "Starts a mirror and copies any specified fixture files into the mirror.",
            "itemtype": "method",
            "name": "velocityStartMirror",
            "params": [
                {
                    "name": "options",
                    "description": "Required fields:\n                  framework - String ex. 'mocha-web-1'\n                  rootUrl - String ex. 'http://localhost:5000/x=y'\n\n                Optional parameters:\n                  fixtureFiles - Array of files with absolute paths\n                  port - String use a specific port instead of finding the next available one",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 537,
            "description": "Reuses a mirror is it has already been started and updated the VelocityMirrors collection",
            "itemtype": "method",
            "name": "_reuseExistingMirror",
            "params": [
                {
                    "name": "options",
                    "description": "Required fields:\n                  framework - String ex. 'mocha-web-1'\n                  port - String use a specific port\n                  requestId - the request id to put in the mirror metadata",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 570,
            "description": "Returns the MongoDB URL for the given database.",
            "params": [
                {
                    "name": "database",
                    "description": ""
                }
            ],
            "return": {
                "description": "MongoDB Url",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 587,
            "description": "Return URL for the mirror with the given port.",
            "params": [
                {
                    "name": "port",
                    "description": "Mirror port"
                }
            ],
            "return": {
                "description": "Mirror URL",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 604,
            "description": "Add fixtures to the database.",
            "params": [
                {
                    "name": "fixtureFiles",
                    "description": "Array with fixture file paths."
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 618,
            "description": "Performs a http get and retries the specified number of times with the specified timeouts.\n Uses a future to respond and the future return object can be provided.",
            "itemtype": "method",
            "name": "_retryHttpGet",
            "params": [
                {
                    "name": "url",
                    "description": "requiredFields  The target location"
                },
                {
                    "name": "callback",
                    "description": "calls back with (error, result) where error is the exception and result is the status code"
                }
            ],
            "return": {
                "description": "A future that can be used in meteor methods (or for other async needs)"
            },
            "access": "private",
            "tagname": "",
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 671,
            "description": "Initialize the directory/file watcher.",
            "itemtype": "method",
            "name": "_initWatcher",
            "params": [
                {
                    "name": "config",
                    "description": "See `registerTestingFramework`.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 750,
            "description": "Re-init file watcher and clear all test results.",
            "itemtype": "method",
            "name": "_reset",
            "params": [
                {
                    "name": "config",
                    "description": "See `registerTestingFramework`.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 795,
            "description": "If any one test has failed, mark the aggregate test result as failed.",
            "itemtype": "method",
            "name": "_updateAggregateReports",
            "access": "private",
            "tagname": "",
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 838,
            "description": "Creates a physical mirror of the application under .meteor/local/.mirror\n\n    - Any files with the pattern tests/.*  are not copied, this stops .report\n    directory from also being copied.\n\n    TODO - Strips out velocity and reporters from the mirror's .meteor/packages file",
            "itemtype": "method",
            "name": "_syncMirror",
            "params": [
                {
                    "name": "force",
                    "description": "performs an rsync even if no mirrors have been requested"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "core.js",
            "line": 893,
            "description": "Checks if the user has a local packages directory, if so it ensures it's symlinked in the mirror.\nThe reason this is needed is because the standard rsync will copy a the packages dir and not respect\nthe symlinks inside it.",
            "itemtype": "method",
            "name": "_symlinkPackagesDirIfPresent",
            "access": "private",
            "tagname": "",
            "class": "Velocity",
            "module": "Velocity"
        },
        {
            "file": "default-fixture.js",
            "line": 19,
            "description": "Meteor method: velocity/isMirror\nExposes the IS_MIRROR flag to mirror clients",
            "itemtype": "method",
            "name": "velocity/isMirror",
            "class": "",
            "module": "Velocity"
        },
        {
            "file": "default-fixture.js",
            "line": 29,
            "description": "Meteor method: velocity/resetDatabase\nThis truncate all collections in the app by using the native mongo object and calling collection.remove()",
            "itemtype": "method",
            "name": "velocity/resetDatabase",
            "class": "",
            "module": "Velocity"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: memberof",
            "line": " lib/FileCopier.js:58"
        },
        {
            "message": "unknown tag: memberof",
            "line": " lib/FileCopier.js:83"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " core.js:570"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " core.js:587"
        },
        {
            "message": "Missing item type\nCopied from Meteor tools/files.js.\n\nIncludes:\n- Helper to find the app root path",
            "line": " lib/meteor/files.js:1"
        },
        {
            "message": "Missing item type\nStops copying files to the mirror.",
            "line": " lib/FileCopier.js:83"
        },
        {
            "message": "Missing item type\nReturns the MongoDB URL for the given database.",
            "line": " core.js:570"
        },
        {
            "message": "Missing item type\nReturn URL for the mirror with the given port.",
            "line": " core.js:587"
        },
        {
            "message": "Missing item type\nAdd fixtures to the database.",
            "line": " core.js:604"
        }
    ]
}